import numpy as np
import matplotlib.pyplot as plt #画图包
import pandas as pd
import sklearn

from sklearn.cluster import KMeans  #K-means算法包
from sklearn.datasets import make_blobs


def readCSVData():

    filePath = '/Users/alisa/Desktop/StepRunner/数据集/health-insurance-marketplace/Crosswalk2016.csv'

    file_csv = pd.read_csv(filePath)  #这里用的pandas的读取CSV的方式，优势：读取的数据可以直接转为数组
    data_old = file_csv.values
    data = np.array([data_old[:,7], data_old[:, 9]])
    data_reSet = np.transpose(data)   #矩阵的转置

    return data_reSet

def oneStep(data): #聚类数据生成器，生成测试数据与对应分类数据，并画出图表，观察结果

    x_one = np.array(data[:, 0])  # 第一列的所有元素
    x_two = np.array(data[:, 1])  # 第二列的所有元素
    xOne_max = np.max(x_one)      # 56045
    xTwo_max = np.max(x_two)      # 5
    plt.figure(figsize=((xOne_max/500), xTwo_max))


    samples_number = data.shape[0]   #样本数量
    feature_number = data.shape[1]   #数组维度，特征数量
    random_state = 10
    center_number = 3

    data_test, target = make_blobs(n_samples= samples_number, n_features= feature_number, random_state= random_state, centers= center_number)
    #plt.scatter(data[:, 0], data[:, 1], c= target)
    #plt.show()                       # 画出了数据集，大致开了下数据的分布

    y_pred = KMeans(n_clusters= 3, random_state=random_state).fit_predict(data_test) #这里已经分为了3个簇，这种方式使用的是sklearn，自带的聚类算法库KMeans
    print('y_pred=', y_pred)

    plt.scatter(data_test[:, 0], data_test[:, 1], c=y_pred)
    plt.show()

    return


def workSapce():

   data = readCSVData()

   oneStep(data)

workSapce()
