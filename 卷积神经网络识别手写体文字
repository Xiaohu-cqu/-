from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf
import numpy as np

def weight_variable(shape):
    # 正态分布，标准差为0.1，默认最大为1，最小为-1，均值为0
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)


def bias_variable(shape):
    # 创建一个结构为shape矩阵也可以说是数组shape声明其行列，初始化所有值为0.1
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)


def conv2d(x, W):
    # 卷积遍历各方向步数为1，SAME：边缘外自动补0，遍历相乘
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')


def max_pool_2x2(x):
    # 池化卷积结果（conv2d）池化层采用kernel大小为2*2，步数也为2，周围补0，取最大值。数据量缩小了4倍
    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

def dataWorks(train_images, train_labels, test_images, test_labels):

    # 把一张图28x28的二维数据平展为784的一维数据
    x0_train = train_images.shape[0]
    x1_train = train_images.shape[1]
    x2_train = train_images.shape[2]
    x_train = x1_train * x2_train
    train_images = train_images.reshape(x0_train, x_train)

    x0_test = test_images.shape[0]
    x1_test = test_images.shape[1]
    x2_test = test_images.shape[2]
    x_test = x1_test * x2_test
    test_images = test_images.reshape(x0_test, x_test)

    train_labels = train_labels.reshape([train_labels.shape[0], 1])
    test_labels = test_labels.reshape([test_labels.shape[0], 1])

    # 把y的标签数组转换成可以feed的数据
    # 原有的y为train_labels[0] = [5],转换后 train_labels[0] = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
    y_transLabels = np.zeros((train_labels.shape[0], 10), float)
    for index in range(train_labels.shape[0]):
        y_value = train_labels[index][0]
        y_transLabels[index][int(y_value)] = 1
    train_labels = y_transLabels

    y_testLabels = np.zeros((test_labels.shape[0], 10), float)
    for index in range(test_labels.shape[0]):
        y_value = test_labels[index][0]
        y_testLabels[index][int(y_value)] = 1
    test_labels = y_testLabels

    train_images, train_labels  = np.float32(train_images), np.float32(train_labels)
    test_images, test_labels = np.float32(test_images), np.float32(test_labels)

    return train_images, train_labels, test_images, test_labels


def WorkSpace(train_images, train_labels, test_images, test_labels):

    print('step 1')
    #文件中读取的数据进行结构上的变换
    train_images, train_labels, test_images, test_labels = dataWorks(train_images, train_labels, test_images, test_labels)
    print('train_images=', train_images.shape, 'train_labels=', train_labels.shape)
    print('test_images=', test_images.shape, 'test_labels=', test_labels.shape)

    print('step 2')
    # 每个批次100张照片
    batch_size = 100
    # 计算一共有多少个批次
    n_batch = train_images.shape[0] // batch_size

    print('step 3')
    # 声明一个占位符，None表示输入图片的数量不定，28*28图片分辨率
    xs = tf.placeholder(tf.float32, [None, 784], name= 'Alisa-input')
    # 类别是0-9总共10个类别，对应输出分类结果
    ys = tf.placeholder(tf.float32, [None, 10])
    keep_prob = tf.placeholder(tf.float32)
    # x_image又把xs reshape成了28*28*1的形状，因为是灰色图片，所以通道是1.作为训练时的input，-1代表图片数量不定
    x_image = tf.reshape(xs, [-1, 28, 28, 1])

    print('step 3')
    ## 第一层卷积操作 ##
    # 第一二参数值得卷积核尺寸大小，即patch，第三个参数是图像通道数，第四个参数是卷积核的数目，代表会出现多少个卷积特征图像;
    W_conv1 = weight_variable([5, 5, 1, 32])
    # 对于每一个卷积核都有一个对应的偏置量。
    b_conv1 = bias_variable([32])
    # 图片乘以卷积核，并加上偏执量，卷积结果28x28x32
    h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)
    # 池化结果14x14x32 卷积结果乘以池化卷积核
    h_pool1 = max_pool_2x2(h_conv1)

    ## 第二层卷积操作 ##
    # 32通道卷积，卷积出64个特征
    w_conv2 = weight_variable([5, 5, 32, 64])
    # 64个偏执数据
    b_conv2 = bias_variable([64])
    # 注意h_pool1是上一层的池化结果，#卷积结果14x14x64
    h_conv2 = tf.nn.relu(conv2d(h_pool1, w_conv2) + b_conv2)
    # 池化结果7x7x64
    h_pool2 = max_pool_2x2(h_conv2)
    # 原图像尺寸28*28，第一轮图像缩小为14*14，共有32张，第二轮后图像缩小为7*7，共有64张

    ## 第三层全连接操作 ##
    # 二维张量，第一个参数7*7*64的patch，也可以认为是只有一行7*7*64个数据的卷积，第二个参数代表卷积个数共1024个
    W_fc1 = weight_variable([7 * 7 * 64, 1024])
    # 1024个偏执数据
    b_fc1 = bias_variable([1024])
    # 将第二层卷积池化结果reshape成只有一行7*7*64个数据# [n_samples, 7, 7, 64] ->> [n_samples, 7*7*64]
    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])
    # 卷积操作，结果是1*1*1024，单行乘以单列等于1*1矩阵，matmul实现最基本的矩阵相乘，不同于tf.nn.conv2d的遍历相乘，自动认为是前行向量后列向量
    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

    # dropout操作，减少过拟合，其实就是降低上一层某些输入的权重scale，甚至置为0，升高某些输入的权值，甚至置为2，防止评测曲线出现震荡，个人觉得样本较少时很必要
    # 使用占位符，由dropout自动确定scale，也可以自定义，比如0.5，根据tensorflow文档可知，程序中真实使用的值为1/0.5=2，也就是某些输入乘以2，同时某些输入乘以0
    keep_prob = tf.placeholder(tf.float32)
    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)  # 对卷积结果执行dropout操作

    ## 第四层输出操作 ##
    # 二维张量，1*1024矩阵卷积，共10个卷积，对应我们开始的ys长度为10
    W_fc2 = weight_variable([1024, 10])
    b_fc2 = bias_variable([10])
    prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2, name= 'Alisa-output') # 使用softmax分类器
    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels= ys, logits= prediction))
    train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)  # 调用梯度下降
    correct_prediction = tf.equal(tf.argmax(prediction, 1), tf.argmax(ys, 1))
    init = tf.global_variables_initializer()

    #求准确率
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

    print('n_batch=', n_batch)
    with tf.Session() as sess:
        sess.run(init)
        for epoch in range(1):
            print('step 5')
            # 每个周期迭代n_batch个batch，每个batch为100
            for batch in range(n_batch):
                #print('step 6:batch=', batch)
                # 获得一个batch的数据和标签
                image_index_start = batch * batch_size
                image_index_end = image_index_start + 100
                #print('image_index_start=', image_index_start, 'image_index_end=', image_index_end)
                batch_xs, batch_ys = train_images[image_index_start: image_index_end, :], train_labels[image_index_start: image_index_end, :]

                sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys, keep_prob: 0.5 })

                # 计算准确率
                if(batch % 20 == 0):
                    print('step 7: image_index_start=', image_index_start, 'step 7: image_index_end=', image_index_end)
                    batch_xst, batch_yst = train_images[100: 200, :], train_labels[100: 200,:]
                    result = sess.run(accuracy, feed_dict={xs: batch_xst, ys: batch_yst, keep_prob: 1.0})
                    print('result=', result)

            output_graph_def = tf.graph_util.convert_variables_to_constants(sess, sess.graph_def,
                                                                            output_node_names=['output'])
            # 保存模型到目录下的model文件夹
            with tf.gfile.FastGFile('./models/tfmodel.pb', mode='wb') as f:
                f.write(output_graph_def.SerializeToString())

    return
