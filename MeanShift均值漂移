import matplotlib.pyplot as plt
import math

import numpy as np
from sklearn.cluster import MeanShift, estimate_bandwidth
from sklearn.datasets.samples_generator import  make_blobs
import pandas as pd
import matplotlib.pyplot as plt
from itertools import cycle

def cal_Gaussian(x, h=1):
    molecule = x * x   #分子
    denominator = 2 * h * h    #分母
    left = 1 / (math.sqrt(2 * math.pi) * h)  # math.sqrt开根号，math.pi派
    return left * math.exp(-molecule / denominator) # math.exp 对应 底数e

def basicPrinciple():

    x = []
    for i in range(-50, 50):
        x.append(i * 0.5)
    score_1 = []
    scroe_2 = []
    score_3 = []
    score_4 = []

    for i in x:
        score_1.append(cal_Gaussian(i, 1))
        scroe_2.append(cal_Gaussian(i, 2))
        score_3.append(cal_Gaussian(i, 3))
        score_4.append(cal_Gaussian(i, 4))

    '''
    print('score_1=', score_1)
    print('scroe_2=', scroe_2)
    print('score_3=', score_3)
    print('score_4=', score_4)
    '''
    plt.figure()
    plt.plot(x, score_1, color = 'blue', linestyle = '--', label = 'h = 1')
    plt.plot(x, scroe_2, color = 'red', linestyle = '--', label = 'h = 2')
    plt.plot(x, score_3, color = 'orange', linestyle = '--', label = 'h = 3')
    plt.plot(x, score_4, color = 'yellow', linestyle = '--', label = 'h = 4')

    plt.legend(loc="upper right")
    plt.xlabel('x')
    plt.ylabel('N')

    plt.show()

    return

def readCSVData():

    filePath = '/Users/alisa/Desktop/StepRunner/数据集/health-insurance-marketplace/Crosswalk2016.csv'

    file_csv = pd.read_csv(filePath)  #这里用的pandas的读取CSV的方式，优势：读取的数据可以直接转为数组
    data_old = file_csv.values
    data = np.array([data_old[:,7], data_old[:, 9]])
    data_reSet = np.transpose(data)   #矩阵的转置

    return data_reSet

def exampleWork():

    datas = readCSVData()
    x_one = np.array(datas[:, 0])  # 第一列的所有元素
    x_two = np.array(datas[:, 1])  # 第二列的所有元素
    xOne_max = np.max(x_one)  # 56045
    xTwo_max = np.max(x_two)  # 5

    datas = datas/[xOne_max, xTwo_max]


    n_sample = datas.shape[0]
    n_feature = datas.shape[1]
    print('n_sample=', n_sample)


    bandWidth = estimate_bandwidth(datas, quantile= 0.2, n_samples= n_sample) #GPU计算能力达到上限，计算不出来，一直没结果
    #print('bandWidth=', bandWidth)



    ms = MeanShift(bandwidth= 0.3, bin_seeding= True)
    ms.fit(datas)


    labels = ms.labels_
    cluster_centers = ms.cluster_centers_
    labels_unique = np.unique(labels)
    n_clusters_ = len(labels_unique)
    new_X = np.column_stack((datas, labels))
    print('number of estimated cluster: %d', n_clusters_)

    plt.figure(1)
    plt.clf()

    colors = cycle('bgrcmykbgrcmykbgrcmykbgrcmyk')
    for k, col in zip(range(n_clusters_), colors):
        my_members = labels == k
        cluster_center = cluster_centers[k]
        plt.plot(datas[my_members, 0], datas[my_members, 1], col + '.')
        plt.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col, markeredgecolor= 'k', markersize = 14)
    plt.title("Estimated number of clusters: %d" % n_clusters_)
    plt.show()

    print('data=', datas.shape)

    return

def workSpace():

    #basicPrinciple()
    exampleWork()


    return

workSpace()
